{"version":3,"sources":["webpack://origin/./src/styles/_variables.scss","webpack://origin/./src/styles/editor-style.scss","webpack://origin/./src/styles/utilities/_mq.scss","webpack://origin/./src/styles/base/_base.scss","webpack://origin/./src/styles/base/_typography.scss"],"names":[],"mappings":"AAAA,MACC,mJACA,sJAEA,gCACA,sCACA,uCACA,kCACA,oCACA,oCACA,oCACA,oCAEA,wBACA,yBACA,uBACA,wBACA,4CAEA,kBACA,2BAEA,0BACA,kBACA,2BAEA,wBACA,0BACA,yBACA,2BAEA,uBACA,0BACA,2BACA,0BACA,2BAEA,yBACA,wBACA,0BACA,wBACA,yBAEA,6BAEA,qBAEA,kBACA,iBACA,kBACA,cACA,kBACA,oBAEA,wBACA,2BACA,qBCVD,CCuLA,wBFrOA,MA2DE,oCACA,kCACA,oCACA,oCACA,mCCTA,CACF,CEpDA,iBAGE,qBFwDF,CEpDA,oBAEE,SFwDF,CEpDA,gFAeE,QFwDF,CErDA,UACC,YAMA,+BACA,2BACA,+BACA,6BACA,6BACA,8CACA,mCACA,iCF2CD,CEvCA,oBAEE,eFwDF,CEpDA,eACE,8DFwDF,CEpDA,IACE,eACA,aFwDF,CEpDA,wCAEC,WFwDD,CEpDA,YACE,cFwDF,CEpDA,6BAIE,YFwDF,CEpDA,uCACE,EACD,8EACA,oFACA,oCACA,8BFwDC,CACF,CGtJA,EACC,4BACA,eHwJD,CGrJA,OACC,+BHwJD,CGrJA,MAEC,gBACA,kBACA,qBACA,gBHwJD,CGrJA,wBAIC,aACA,eHwJD,CGrJA,KACC,QHwJD,CGrJA,WACC,iBACA,4CHwJD,CGrJA,EACC,6BACA,oBHwJD,CGrJA,QACC,8BACA,yBHwJD,CGrJA,eAKC,SACA,wCACA,oCACA,0BHwJD,CGrJA,cAAiB,6BHyJjB,CGxJA,cAAiB,6BH4JjB,CG3JA,cAAiB,6BH+JjB,CG9JA,cAAiB,6BHkKjB,CGjKA,cAAiB,6BHqKjB,CGnKA,KACC,uFACA,gBACA,kBAGA,aHsKD,CGnKA,SALC,yBACA,mBHgLD,CG5KA,IAGC,cACA,cACA,uBACA,eHsKD,C","file":"css/editor-style.css","sourcesContent":[":root {\n\t--body-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\t--display-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\n\t--font-size: calc(1rem + 0.15vw);\n\t--font-size-lead: calc(1.2rem + 0.1vw);\n\t--font-size-small: calc(0.9rem + 0.1vw);\n\t--font-size-h1: calc(2rem + 0.2vw);\n\t--font-size-h2: calc(1.8rem + 0.2vw);\n\t--font-size-h3: calc(1.5rem + 0.2vw);\n\t--font-size-h4: calc(1.3rem + 0.2vw);\n\t--font-size-h5: calc(1.2rem + 0.2vw);\n\n\t--font-weight-light: 100;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 700;\n\t--font-weight-heavy: 900;\n\t--font-weight-heavy: var(--font-weight-bold);\n\n\t--line-height: 1.5;\n\t--line-height-headings: 1.2;\n\n\t--color-grey-dark: #6a6a6a;\n\t--color-grey: #ddd;\n\t--color-grey-light: #efefef;\n\n\t--color-primary: #59BACC;\n\t--color-secondary: #58AD69;\n\t--color-tertiary: #FFBC49;\n\t--color-quaternary: #E2574C;\n\n\t--color-text-base: #333;\n\t--color-text-dark: #181822;\n\t--color-text-reversed: #fff;\n\t--color-text-link: #0087D0;\n\t--color-text-hover: #003451;\n\n\t--color-facebook: #3B5998;\n\t--color-twitter: #1DA1F2;\n\t--color-instagram: #262626;\n\t--color-youtube: #cc181e;\n\t--color-linkedin: #0077B5;\n\n\t--body-background-color: #fff;\n\n\t--border-radius: 16px;\n\n\t--spacing-xxl: 3em;\n\t--spacing-xl: 2em;\n\t--spacing-l: 1.5em;\n\t--spacing: 1em;\n\t--spacing-s: 0.5em;\n\t--spacing-xs: 0.25em;\n\n\t--container-width: 75rem;\n\t--container-width-l: 100rem;\n\t--content-width: 50rem;\n\n\t@include mq(large) {\n\t\t--font-size-h1: calc(3.2rem + 0.2vw);\n\t\t--font-size-h2: calc(2rem + 0.2vw);\n\t\t--font-size-h3: calc(1.6rem + 0.2vw);\n\t\t--font-size-h4: calc(1.4rem + 0.2vw);\n\t\t--font-size-h5: calc(1.2rem + 0.2vw);\n\t}\n}\n",":root {\n  --body-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  --display-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  --font-size: calc(1rem + 0.15vw);\n  --font-size-lead: calc(1.2rem + 0.1vw);\n  --font-size-small: calc(0.9rem + 0.1vw);\n  --font-size-h1: calc(2rem + 0.2vw);\n  --font-size-h2: calc(1.8rem + 0.2vw);\n  --font-size-h3: calc(1.5rem + 0.2vw);\n  --font-size-h4: calc(1.3rem + 0.2vw);\n  --font-size-h5: calc(1.2rem + 0.2vw);\n  --font-weight-light: 100;\n  --font-weight-normal: 400;\n  --font-weight-bold: 700;\n  --font-weight-heavy: 900;\n  --font-weight-heavy: var(--font-weight-bold);\n  --line-height: 1.5;\n  --line-height-headings: 1.2;\n  --color-grey-dark: #6a6a6a;\n  --color-grey: #ddd;\n  --color-grey-light: #efefef;\n  --color-primary: #59BACC;\n  --color-secondary: #58AD69;\n  --color-tertiary: #FFBC49;\n  --color-quaternary: #E2574C;\n  --color-text-base: #333;\n  --color-text-dark: #181822;\n  --color-text-reversed: #fff;\n  --color-text-link: #0087D0;\n  --color-text-hover: #003451;\n  --color-facebook: #3B5998;\n  --color-twitter: #1DA1F2;\n  --color-instagram: #262626;\n  --color-youtube: #cc181e;\n  --color-linkedin: #0077B5;\n  --body-background-color: #fff;\n  --border-radius: 16px;\n  --spacing-xxl: 3em;\n  --spacing-xl: 2em;\n  --spacing-l: 1.5em;\n  --spacing: 1em;\n  --spacing-s: 0.5em;\n  --spacing-xs: 0.25em;\n  --container-width: 75rem;\n  --container-width-l: 100rem;\n  --content-width: 50rem;\n}\n@media (min-width: 70em) {\n  :root {\n    --font-size-h1: calc(3.2rem + 0.2vw);\n    --font-size-h2: calc(2rem + 0.2vw);\n    --font-size-h3: calc(1.6rem + 0.2vw);\n    --font-size-h4: calc(1.4rem + 0.2vw);\n    --font-size-h5: calc(1.2rem + 0.2vw);\n  }\n}\n\n/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default padding */\nul[class],\nol[class] {\n  padding: 0;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\nh5,\np,\nul[class],\nol[class],\nli,\nfigure,\nfigcaption,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\nhtml, body {\n  height: 100%;\n}\n\n/* Set core body defaults */\nhtml,\nbody {\n  font-family: var(--body-family);\n  font-size: var(--font-size);\n  line-height: var(--line-height);\n  text-rendering: optimizeSpeed;\n  color: var(--color-text-base);\n  background-color: var(--body-background-color);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* Remove list styles on ul, ol elements with a class attribute */\nul[class],\nol[class] {\n  list-style: none;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg {\n  max-width: 100%;\n  display: block;\n}\n\n/* Make sure images with WordPress-added height and width attributes are scaled correctly */\nimg[class*=align],\nimg[class*=wp-image-] {\n  height: auto;\n}\n\n/* Natural flow and rhythm in articles by default */\narticle > * + * {\n  margin-top: 1em;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations and transitions for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\np {\n  margin-top: var(--spacing-l);\n  margin-bottom: 0;\n}\n\np.lead {\n  font-size: var(--font-size-lead);\n}\n\nul,\nol {\n  list-style: none;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n  padding-left: 1em;\n}\n\nul ul,\nol ul,\nul ol,\nol ol {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\nli p {\n  margin: 0;\n}\n\nblockquote {\n  padding-left: 1em;\n  border-left: 4px solid var(--color-text-dark);\n}\n\na {\n  color: var(--color-text-link);\n  text-decoration: none;\n}\n\na:hover {\n  color: var(--color-text-hover);\n  text-decoration: underline;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  margin: 0;\n  line-height: var(--line-height-headings);\n  font-weight: var(--font-weight-bold);\n  color: var(--heading-color);\n}\n\nh1, .heading-1 {\n  font-size: var(--font-size-h1);\n}\n\nh2, .heading-2 {\n  font-size: var(--font-size-h2);\n}\n\nh3, .heading-3 {\n  font-size: var(--font-size-h3);\n}\n\nh4, .heading-4 {\n  font-size: var(--font-size-h4);\n}\n\nh5, .heading-5 {\n  font-size: var(--font-size-h5);\n}\n\ncode {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  font-size: 0.75em;\n  font-style: normal;\n  background-color: #f4f4f4;\n  border-radius: 0.2rem;\n  padding: 0.2rem;\n}\n\npre {\n  background-color: #f4f4f4;\n  border-radius: 0.2rem;\n  padding: 0.5rem;\n  overflow: auto;\n  width: calc(96vw - 2em);\n  line-height: 1.3;\n}","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\nmobile:  320px,\ntablet:  740px,\ndesktop: 980px,\nwide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n@if unitless($px) {\n@warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n@return mq-px2em($px * 1px, $base-font-size);\n} @else if unit($px) == em {\n@return $px;\n}\n@return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n@if map-has-key($breakpoints, $name) {\n@return map-get($breakpoints, $name);\n} @else {\n@warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n}\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n$from: false,\n$until: false,\n$and: false,\n$media-type: $mq-media-type,\n$breakpoints: $mq-breakpoints,\n$responsive: $mq-responsive,\n$static-breakpoint: $mq-static-breakpoint\n) {\n$min-width: 0;\n$max-width: 0;\n$media-query: '';\n\n// From: this breakpoint (inclusive)\n@if $from {\n@if type-of($from) == number {\n$min-width: mq-px2em($from);\n} @else {\n$min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n}\n}\n\n// Until: that breakpoint (exclusive)\n@if $until {\n@if type-of($until) == number {\n$max-width: mq-px2em($until);\n} @else {\n$max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n}\n}\n\n// Responsive support is disabled, rasterize the output outside @media blocks\n// The browser will rely on the cascade itself.\n@if $responsive == false {\n$static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n$target-width: mq-px2em($static-breakpoint-width);\n\n// Output only rules that start at or span our target width\n@if (\n$and == false\nand $min-width <= $target-width\nand (\n$until == false or $max-width >= $target-width\n)\nand $media-type != 'print'\n) {\n@content;\n}\n}\n\n// Responsive support is enabled, output rules inside @media queries\n@else {\n@if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n@if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n@if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n// Remove unnecessary media query prefix 'all and '\n@if ($media-type == 'all' and $media-query != '') {\n$media-type: '';\n$media-query: str-slice(unquote($media-query), 6);\n}\n\n@media #{$media-type + $media-query} {\n@content;\n}\n}\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n$less:  ();\n$equal: ();\n$large: ();\n\n@if length($list) > 1 {\n$seed: nth($list, ceil(length($list) / 2));\n\n@each $item in $list {\n@if ($item == $seed) {\n$equal: append($equal, $item);\n} @else if ($item < $seed) {\n$less: append($less, $item);\n} @else if ($item > $seed) {\n$large: append($large, $item);\n}\n}\n\n@return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n}\n\n@return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n$map-sorted: ();\n$map-keys: map-keys($map);\n$map-values: map-values($map);\n$map-values-sorted: _mq-quick-sort($map-values);\n\n// Reorder key/value pairs based on key values\n@each $value in $map-values-sorted {\n$index: index($map-values, $value);\n$key: nth($map-keys, $index);\n$map-sorted: map-merge($map-sorted, ($key: $value));\n\n// Unset the value in $map-values to prevent the loop\n// from finding the same index twice\n$map-values: set-nth($map-values, $index, 0);\n}\n\n@return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n$new-breakpoint: ($name: $width);\n$mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n$mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\nbody:before {\nbackground-color: #FCF8E3;\nborder-bottom: 1px solid #FBEED5;\nborder-left: 1px solid #FBEED5;\ncolor: #C09853;\nfont: small-caption;\npadding: 3px 6px;\npointer-events: none;\nposition: fixed;\nright: 0;\ntop: 0;\nz-index: 100;\n\n// Loop through the breakpoints that should be shown\n@each $show-breakpoint in $show-breakpoints {\n$width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n@include mq($show-breakpoint, $breakpoints: $breakpoints) {\ncontent: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n}\n}\n}\n}\n\n@if length($mq-show-breakpoints) > 0 {\n@include mq-show-breakpoints;\n}\n","// Modern CSS reset: https://github.com/hankchizljaw/modern-css-reset\n\n/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default padding */\nul[class],\nol[class] {\n  padding: 0;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\nh5,\np,\nul[class],\nol[class],\nli,\nfigure,\nfigcaption,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\nhtml, body {\n\theight: 100%;\n}\n\n/* Set core body defaults */\nhtml,\nbody {\n\tfont-family: var(--body-family);\n\tfont-size: var(--font-size);\n\tline-height: var(--line-height);\n\ttext-rendering: optimizeSpeed;\n\tcolor: var(--color-text-base);\n\tbackground-color: var(--body-background-color);\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\n/* Remove list styles on ul, ol elements with a class attribute */\nul[class],\nol[class] {\n  list-style: none;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg {\n  max-width: 100%;\n  display: block;\n}\n\n/* Make sure images with WordPress-added height and width attributes are scaled correctly */\nimg[class*=\"align\"],\nimg[class*=\"wp-image-\"] {\n\theight: auto;\n}\n\n/* Natural flow and rhythm in articles by default */\narticle > * + * {\n  margin-top: 1em;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations and transitions for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  * {\n\tanimation-duration: 0.01ms !important;\n\tanimation-iteration-count: 1 !important;\n\ttransition-duration: 0.01ms !important;\n\tscroll-behavior: auto !important;\n  }\n}\n","p {\n\tmargin-top: var(--spacing-l);\n\tmargin-bottom: 0;\n}\n\np.lead {\n\tfont-size: var(--font-size-lead);\n}\n\nul,\nol {\n\tlist-style: none;\n\tmargin-top: 1.5rem;\n\tmargin-bottom: 1.5rem;\n\tpadding-left: 1em;\n}\n\nul ul,\nol ul,\nul ol,\nol ol {\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n}\n\nli p {\n\tmargin: 0;\n}\n\nblockquote {\n\tpadding-left: 1em;\n\tborder-left: 4px solid var(--color-text-dark);\n}\n\na {\n\tcolor: var(--color-text-link);\n\ttext-decoration: none;\n}\n\na:hover {\n\tcolor: var(--color-text-hover);\n\ttext-decoration: underline;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n\tmargin: 0;\n\tline-height: var(--line-height-headings);\n\tfont-weight: var(--font-weight-bold);\n\tcolor: var(--heading-color);\n}\n\nh1, .heading-1 { font-size: var(--font-size-h1); }\nh2, .heading-2 { font-size: var(--font-size-h2); }\nh3, .heading-3 { font-size: var(--font-size-h3); }\nh4, .heading-4 { font-size: var(--font-size-h4); }\nh5, .heading-5 { font-size: var(--font-size-h5); }\n\ncode {\n\tfont-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n\tfont-size: 0.75em;\n\tfont-style: normal;\n\tbackground-color: #f4f4f4;\n\tborder-radius: 0.2rem;\n\tpadding: 0.2rem;\n}\n\npre {\n\tbackground-color: #f4f4f4;\n\tborder-radius: 0.2rem;\n\tpadding: 0.5rem;\n\toverflow: auto;\n\twidth: calc(96vw - 2em);\n\tline-height: 1.3;\n}\n"],"sourceRoot":""}